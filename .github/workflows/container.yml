name: Container

on:
  push:
    branches: [master]
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches: [master]

env:
  COMMON_NAME: ${{ github.sha }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_PROFILE: ${{ vars.AWS_PROFILE }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}

jobs:
  ecr:
    name: setup ECR
    runs-on: ubuntu-latest
    environment: KookaS
    env:
      AWS_CLI_SERVICE: ecr  # private
      DOCKER_FOLDER_PATH: Dockerfile
    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-login-password.outputs.ECR_LOGIN_PASSWORD }}
      PORT: ${{ steps.setup.outputs.PORT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup
        id: setup
        run: |
          sudo apt update -qq
          sudo apt install wget -y -qq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64  -qq -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          echo "PORT=$(sudo yq eval '.port' config/config.yml)" >> $GITHUB_OUTPUT

      - name: Display non-sensitive variables
        run: |
          printf " \
          COMMON_NAME = $COMMON_NAME \n \
          "

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: Get ECR login password
        id: get-login-password
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION)" >> $GITHUB_OUTPUT
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr-public get-login-password --region $AWS_REGION)" >> $GITHUB_OUTPUT
          fi

      - name: login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            docker login --username AWS --password ${{ steps.get-login-password.outputs.ECR_LOGIN_PASSWORD }} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            docker login --username AWS --password ${{ steps.get-login-password.outputs.ECR_LOGIN_PASSWORD }} public.ecr.aws
          fi
      
      - name: Create ECR repository
        run: |
          aws ecr create-repository \
            --repository-name $COMMON_NAME \
            --image-scanning-configuration scanOnPush=true \
            --region $AWS_REGION \
            --output text \
            --query 'repository.repositoryUri'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: "latest"
        run: |
          export ECR_URI=$(aws ecr describe-repositories --repository-names $COMMON_NAME --output text --query "repositories[].[repositoryUri]")
          echo "ECR_URI= $ECR_URI"
          docker build -t $ECR_URI/$IMAGE_TAG -f $DOCKER_FOLDER_PATH .
          docker tag $(docker images -q $ECR_URI/$IMAGE_TAG) $ECR_URI:$IMAGE_TAG
          docker push $ECR_URI:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

  project:
    name: Container check
    needs: [ecr]
    runs-on: ubuntu-latest
    container: ubuntu # connect the workflow steps to the network
    environment: KookaS
    services:
      local-project:
        image:  ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ github.sha }}:${{ needs.ecr.outputs.IMAGE_TAG }}
        credentials:
          username: AWS
          password: ${{ needs.ecr.outputs.ECR_LOGIN_PASSWORD }}
        env:
          NEXT_PUBLIC_API_URL: no-backend-url
          PORT: ${{ needs.ecr.outputs.PORT }}

    steps:
      - name: Status root
        run: |
          curl -Is http://local-project:${{ needs.ecr.outputs.PORT }}/ | grep HTTP
      - name: Status healthz
        run: |
          curl -Is http://local-project:${{ needs.ecr.outputs.PORT }}}/healthz | grep HTTP

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [ecr, project]
    if: ${{ always() && contains(join(needs.ecr.result, ','), 'success') }}
    environment: KookaS
    env:
      AWS_CLI_SERVICE: ecr  # private
    outputs:
      IMAGE_TAG: ${{ steps.build-image.outputs.IMAGE_TAG }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-login-password.outputs.ECR_LOGIN_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: login to ECR
        run: |
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws
          fi
      
      - name: Delete ECR repository
        run: |
          aws ecr delete-repository \
            --repository-name $COMMON_NAME \
            --force \
            --region $AWS_REGION \
            --output text \
            --query 'repository.registryId'
