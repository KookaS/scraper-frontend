name: Container

# FIXME: not triggered for non defaut branch
on:
  # push:
  #   branches: [master]
  # pull_request:
  #   branches: [master]
  workflow_run:
    workflows: [Repository]
    types: [completed]
    branches-ignore: [dependabot/**]
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: "The environment to deploy to"
        required: false
        default: repositories

env:
  COMMON_NAME: ${{ github.sha }}
  AWS_CLI_SERVICE: ecr # private
  IMAGE_TAG: latest # ${{ github.sha }}
  ORG: ${{ github.repository_owner }}
  BRANCH: ${{ github.head_ref || github.ref_name }}

jobs:
  ecr-wait:
    name: setup ECR
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'repositories' }}
    env:
      AWS_REGION_NAME: ${{ vars.AWS_REGION_NAME }}
      AWS_PROFILE_NAME: ${{ vars.AWS_PROFILE_NAME }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY: ${{ vars.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      ECR_REGISTRY_PRIVATE_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION_NAME }}.amazonaws.com
      ECR_REGISTRY_PUBLIC_URI: public.ecr.aws
    # if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event_name == 'push' }}
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      ECR_REPOSITORY_NAME: ${{ steps.get-output.outputs.ECR_REPOSITORY_NAME }}
      ECR_LOGIN_PASSWORD: ${{ steps.get-output.outputs.ECR_LOGIN_PASSWORD }}
      IMAGE_TAG: ${{ steps.get-output.outputs.IMAGE_TAG }}

    steps:
      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id $AWS_ACCESS_KEY
          aws configure set aws_secret_access_key $AWS_SECRET_KEY
          aws configure set region $AWS_REGION_NAME

      - name: Get ECR information
        id: get-output
        run: |
          # variables
          REPO=$(basename ${{ github.repository }})

          # outputs
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_NAME=$(echo $ORG-$REPO-$BRANCH | tr A-Z a-z)" >> $GITHUB_OUTPUT
          if [[ $AWS_CLI_SERVICE == ecr ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr get-login-password --region $AWS_REGION_NAME)" >> $GITHUB_OUTPUT
          elif [[ $AWS_CLI_SERVICE == ecr-public ]]; then
            echo "ECR_LOGIN_PASSWORD=$(aws ecr-public get-login-password --region us-east-1)" >> $GITHUB_OUTPUT
          fi

  # Container network where we can access with the service name and the port
  project:
    name: Container check
    needs: [ecr-wait]
    runs-on: ubuntu-latest
    container: ubuntu # connect the workflow steps to the network
    environment: repositories
    env:
      HEALTHCHECK: /healthz
    services:
      local-project:
        image: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION_NAME }}.amazonaws.com/${{ needs.ecr-wait.outputs.ECR_REPOSITORY_NAME }}:${{ needs.ecr-wait.outputs.IMAGE_TAG }}
        options: --read-only --tmpfs /run/npm
        credentials:
          username: AWS
          password: ${{ needs.ecr-wait.outputs.ECR_LOGIN_PASSWORD }}
        env:
          TMPFS_NPM: /run/npm
          NEXT_PUBLIC_API_URL: not-needed # http://localhost:8080
          PORT: # TODO: add variable port here

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        id: setup
        run: |
          apt update -qq
          apt install curl wget -y -qq
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64  -qq -O /usr/bin/yq && chmod +x /usr/bin/yq
          echo "PORT=$(yq eval '.port' config/config.yml)" >> $GITHUB_OUTPUT

      - name: Status root
        run: |
          curl -Is http://local-project:${{ steps.setup.outputs.PORT }}$ROOT | grep HTTP
      - name: Status healthz
        run: |
          curl -Is http://local-project:${{ steps.setup.outputs.PORT }}$HEALTHCHECK | grep HTTP
