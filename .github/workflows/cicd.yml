name: CI/CD

# only on trunk branch use secrets
on:
  workflow_dispatch:
    inputs:
      aws-account-name:
        description: "AWS Account Name"
        required: true
        type: string
      common-name:
        description: "The name used acrross many resources, usually account-region-project-repo-branch"
        required: true
        type: string
      backend-dns:
        description: "The adress of the backend, e.g. http://localhost:8080"
        required: true
        type: string
      task-desired-count:
        description: "The number of tasks to run in the service"
        required: true
        type: string

env:
  COMMON_NAME: ${{ inputs.common-name }}
  AWS_ACCOUNT_NAME: ${{ inputs.aws-account-name }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}  
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  GH_ORG: KookaS
  GH_REPO: infrastructure-modules
  GH_BRANCH: master
  GH_SCRIPT_PATH: .github/workflows
  GH_INFRA_TOKEN: ${{ secrets.GH_INFRA_TOKEN }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.8.0
      - run: npm ci
      - run: npm run build

  s3-env:
    name: S3 env
    runs-on: ubuntu-latest
    environment: ${{ inputs.aws-account-name }}
    env:
      BACKEND_DNS: ${{ inputs. backend-dns }}
      BRANCH: ${{ github.head_ref || github.ref_name }}
      BUCKET_ENV: ${{ inputs.common-name }}-env # TODO: hardcoded extension here

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Display
        run: |
          printf " \
          BRANCH = $BRANCH\n \
          S3 file = s3://$BUCKET_ENV/$BRANCH.env\n \
          "

      - name: setup AWS CLI
        run: |
          aws --version
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
          aws configure set region $AWS_REGION

      - name: Upload env file
        run: |
          cat <<EOF > .env
          NEXT_PUBLIC_API_URL=$BACKEND_DNS
          PORT=${{ steps.setup.outputs.PORT }}
          EOF
          aws s3 cp .env s3://$BUCKET_ENV/$BRANCH.env

  ecr:
    name: ECR
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.aws-account-name }}
    env:
      SCRIPT_NAME: ecr-set.sh
      LOG_FILE: log.out
      AWS_CLI_SERVICE: ecr # private
      DOCKER_FOLDER_PATH: Dockerfile
      IMAGE_TAG: "latest"
    needs: [build]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run script
        id: script
        run: |
          curl -L \
            -H "Accept: application/vnd.github.v3.raw" \
            -H "Authorization: Bearer $GH_INFRA_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$GH_ORG/$GH_REPO/contents/$GH_SCRIPT_PATH/$SCRIPT_NAME?ref=$GH_BRANCH > $SCRIPT_NAME && chmod +x $SCRIPT_NAME

          eval res=$(./$SCRIPT_NAME LOG_FILE=$LOG_FILE AWS_ACCESS_KEY=$AWS_ACCESS_KEY AWS_SECRET_KEY=$AWS_SECRET_KEY AWS_REGION=$AWS_REGION AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID COMMON_NAME=$COMMON_NAME AWS_CLI_SERVICE=ecr ECR_CREATE=false IMAGE_TAG=$IMAGE_TAG DOCKER_FOLDER_PATH=$DOCKER_FOLDER_PATH)

          echo -e '\033[46mLOGS\033[0m'; cat $LOG_FILE
          if [ -n "$(grep -i error $LOG_FILE)" ]; then
            echo -e '\033[41mERRORS\033[0m'; grep -ni error $LOG_FILE | sed 's/$/\n/'; exit 10
          fi

  ecs:
    name: ECS
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.aws-account-name }}
    needs: [ecr, s3-env]
    env:
      SCRIPT_NAME: ecs-set.sh
      LOG_FILE: log.out
      DESIRED_COUNT: ${{ inputs.task-desired-count }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run script
        id: script
        run: |
          curl -L \
            -H "Accept: application/vnd.github.v3.raw" \
            -H "Authorization: Bearer $GH_INFRA_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$GH_ORG/$GH_REPO/contents/$GH_SCRIPT_PATH/$SCRIPT_NAME?ref=$GH_BRANCH > $SCRIPT_NAME && chmod +x $SCRIPT_NAME

          eval res=$(./$SCRIPT_NAME LOG_FILE=$LOG_FILE AWS_ACCESS_KEY=$AWS_ACCESS_KEY AWS_SECRET_KEY=$AWS_SECRET_KEY AWS_REGION=$AWS_REGION AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID COMMON_NAME=$COMMON_NAME)

          echo -e '\033[46mLOGS\033[0m'; cat $LOG_FILE
          if [ -n "$(grep -i error $LOG_FILE)" ]; then
            echo -e '\033[41mERRORS\033[0m'; grep -ni error $LOG_FILE | sed 's/$/\n/'; exit 10
          fi